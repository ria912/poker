# round_manager.py
from models.action import Action
from models.table import Table


class RoundManager:
    def __init__(self, table: Table):
        self.table = table
        self.players = table.players
        self.active_players = []
        self.last_raiser = None
        self.action_index = 0

    def play_hand(self):
        self.table.start_hand()
        self.active_players = [p for p in self.players if not p.has_folded and p.stack > 0]

        self.betting_round("Preflop")

        if len(self.active_players) > 1:
            self.deal_community_cards(3)  # Flop
            self.betting_round("Flop")

        if len(self.active_players) > 1:
            self.deal_community_cards(1)  # Turn
            self.betting_round("Turn")

        if len(self.active_players) > 1:
            self.deal_community_cards(1)  # River
            self.betting_round("River")

        self.showdown()

    def deal_community_cards(self, num_cards):
        for _ in range(num_cards):
            card = self.table.deck.draw()
            self.table.community_cards.append(card)

    def betting_round(self, round_name):
        print(f"\n--- {round_name} ---")

        # リセット
        self.reset_bets()

        self.active_players = [p for p in self.players if not p.has_folded and p.stack > 0]
        self.last_raiser = None
        self.action_index = self.get_starting_index(round_name)

        # アクションループ
        acted_players = set()
        while True:
            player = self.active_players[self.action_index]
            legal_info = Action.get_legal_actions(player, self.table)
            action, amount = player.decide_action(legal_info)

            print(f"{player.name} ({player.position}) -> {action.upper()} {amount if amount else ''}")

            Action.apply_action(player, action, self.table, amount)

            if action in [Action.BET, Action.RAISE, Action.ALL_IN]:
                self.last_raiser = player
                acted_players = set([player])  # リセット
            else:
                acted_players.add(player)

            # 更新
            self.active_players = [p for p in self.players if not p.has_folded and p.stack > 0]

            # 終了条件：1人以外全員が行動済み + last_raiserまで戻ったら
            if len(self.active_players) == 1:
                break
            if self.last_raiser is None and len(acted_players) == len(self.active_players):
                break
            if self.last_raiser and self.active_players[self.action_index] == self.last_raiser and len(acted_players) == len(self.active_players) - 1:
                break

            self.action_index = (self.action_index + 1) % len(self.active_players)

    def get_starting_index(self, round_name):
        # プリフロップはBBの次、それ以外はBTNの次
        for i, p in enumerate(self.active_players):
            if round_name == "Preflop" and p.position == 'BB':
                return (i + 1) % len(self.active_players)
            elif round_name != "Preflop" and p.position == 'BTN':
                return (i + 1) % len(self.active_players)
        return 0

    def reset_bets(self):
        self.table.current_bet = 0
        for p in self.players:
            p.current_bet = 0

    def showdown(self):
        remaining = [p for p in self.players if not p.has_folded]
        if not remaining:
            print("No players remaining.")
            return

        # 現段階では最初のプレイヤーにポットを渡す
        winner = remaining[0]
        print(f"\n🏆 Winner: {winner.name} wins pot of {self.table.pot}")
        winner.stack += self.table.pot
        self.table.pot = 0
